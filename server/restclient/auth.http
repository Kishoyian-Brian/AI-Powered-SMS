### Variables
@baseUrl = http://localhost:3000
@contentType = application/json

### Register New Admin
# @name register
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "fullName": "Brian Kishoyian",
  "email": "admin@sms.com",
  "phone": "+254700866007",
  "password": "@Admin123"
}

### Extract token from registration
@authToken = {{register.response.body.token}}

### Login
# @name login
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "admin@sms.com",
  "password": "@Admin123"
}

### Extract token from login
@loginToken = {{login.response.body.token}}

### Get Current User (using registration token)
GET {{baseUrl}}/auth/me
Authorization: Bearer {{authToken}}

### Get Current User (using login token)
GET {{baseUrl}}/auth/me
Authorization: Bearer {{loginToken}}

### Logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

### Test Login with Wrong Password (Should Fail)
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "brian@example.com",
  "password": "wrongpassword"
}

### Test Register with Duplicate Email (Should Fail)
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "fullName": "Another User",
  "email": "brian@example.com",
  "phone": "+254712345679",
  "password": "password123"
}

### Test Register with Invalid Email (Should Fail)
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "fullName": "Test User",
  "email": "invalidemail",
  "phone": "+254712345679",
  "password": "password123"
}

### Test Register with Short Password (Should Fail)
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "fullName": "Test User",
  "email": "test@example.com",
  "phone": "+254712345679",
  "password": "12345"
}

### Register Second Admin
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "fullName": "John Doe",
  "email": "john@example.com",
  "phone": "+254798765432",
  "password": "securepass123"
}

### Login as Second Admin
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "john@example.com",
  "password": "securepass123"
}

### Register Student User
# @name registerStudent
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "fullName": "Student One",
  "email": "student1@gmail.com",
  "phone": "0786688007",
  "password": "student123"
}

### ============================================
### PASSWORD RESET FLOW
### ============================================

### Step 1: Request Password Reset
# @name forgotPassword
POST {{baseUrl}}/auth/forgot-password
Content-Type: {{contentType}}

{
  "email": "student1@gmail.com"
}

### Extract reset token (development only)
@resetToken = {{forgotPassword.response.body.token}}

### Step 2: Verify Reset Token
GET {{baseUrl}}/auth/verify-reset-token?token={{resetToken}}

### Step 3: Reset Password with Token
POST {{baseUrl}}/auth/reset-password
Content-Type: {{contentType}}

{
  "token": "{{resetToken}}",
  "newPassword": "newpassword123"
}

### Step 4: Login with New Password
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "student1@gmail.com",
  "password": "newpassword123"
}

### Test: Request Reset for Non-Existent Email (Should Not Reveal)
POST {{baseUrl}}/auth/forgot-password
Content-Type: {{contentType}}

{
  "email": "nonexistent@example.com"
}

### Test: Use Invalid Reset Token (Should Fail)
POST {{baseUrl}}/auth/reset-password
Content-Type: {{contentType}}

{
  "token": "invalid-token-12345",
  "newPassword": "newpassword123"
}

### Test: Verify Invalid Token (Should Return Invalid)
GET {{baseUrl}}/auth/verify-reset-token?token=invalid-token-12345

### ============================================
### EMAIL VERIFICATION FLOW
### ============================================

### Register a New User (Sends Verification Email)
# @name registerWithVerification
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "fullName": "John Test",
  "email": "johntest@example.com",
  "phone": "0700123456",
  "password": "password123"
}

### Extract verification token (development only)
@verificationToken = {{registerWithVerification.response.body.verificationToken}}

### Step 1: Verify Email with Token
POST {{baseUrl}}/auth/verify-email
Content-Type: {{contentType}}

{
  "token": "{{verificationToken}}"
}

### Step 2: Login After Verification
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "johntest@example.com",
  "password": "password123"
}

### Step 3: Resend Verification Email
POST {{baseUrl}}/auth/resend-verification
Content-Type: {{contentType}}

{
  "email": "johntest@example.com"
}

### Test: Verify with Invalid Token (Should Fail)
POST {{baseUrl}}/auth/verify-email
Content-Type: {{contentType}}

{
  "token": "invalid-verification-token-12345"
}

### Test: Resend to Already Verified Email
POST {{baseUrl}}/auth/resend-verification
Content-Type: {{contentType}}

{
  "email": "johntest@example.com"
}

### Test: Resend to Non-Existent Email (Should Not Reveal)
POST {{baseUrl}}/auth/resend-verification
Content-Type: {{contentType}}

{
  "email": "doesnotexist@example.com"
}

### ============================================
### RATE LIMITING TESTS
### ============================================

### Test: Login Rate Limit (5 requests per 60s)
### Try this 6 times in quick succession - 6th should fail with 429
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "test@example.com",
  "password": "wrongpassword"
}

### Test: Register Rate Limit (3 requests per 60s)
### Try this 4 times in quick succession - 4th should fail with 429
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "fullName": "Rate Test User",
  "email": "ratetest{{$randomInt}}@example.com",
  "phone": "0700000{{$randomInt}}",
  "password": "password123"
}

### Test: Forgot Password Rate Limit (3 requests per 60s)
POST {{baseUrl}}/auth/forgot-password
Content-Type: {{contentType}}

{
  "email": "test@example.com"
}

### Note: GET /auth/me has no rate limit (SkipThrottle)
### This can be called unlimited times
GET {{baseUrl}}/auth/me
Authorization: Bearer {{authToken}}

### ============================================
### REFRESH TOKEN FLOW
### ============================================

### Step 1: Login and get tokens
# @name loginForRefresh
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "student1@gmail.com",
  "password": "mynewpassword123"
}

### Extract tokens
@accessToken = {{loginForRefresh.response.body.accessToken}}
@refreshToken = {{loginForRefresh.response.body.refreshToken}}

### Step 2: Use access token (Should work)
GET {{baseUrl}}/auth/me
Authorization: Bearer {{accessToken}}

### Step 3: Refresh the access token
# @name refreshResponse
POST {{baseUrl}}/auth/refresh
Content-Type: {{contentType}}

{
  "refreshToken": "{{refreshToken}}"
}

### Extract new tokens
@newAccessToken = {{refreshResponse.response.body.accessToken}}
@newRefreshToken = {{refreshResponse.response.body.refreshToken}}

### Step 4: Use new access token (Should work)
GET {{baseUrl}}/auth/me
Authorization: Bearer {{newAccessToken}}

### Step 5: Try to use old refresh token (Should FAIL - token rotation)
POST {{baseUrl}}/auth/refresh
Content-Type: {{contentType}}

{
  "refreshToken": "{{refreshToken}}"
}

### Test: Invalid refresh token (Should fail)
POST {{baseUrl}}/auth/refresh
Content-Type: {{contentType}}

{
  "refreshToken": "invalid-refresh-token-12345"
}

### Test: Wait 16 minutes and access token will expire
### (Access token expires in 15 minutes)
### Then use refresh token to get a new one
# Uncomment to test after 16 minutes
# POST {{baseUrl}}/auth/refresh
# Content-Type: {{contentType}}
# 
# {
#   "refreshToken": "{{newRefreshToken}}"
# }

### ============================================
### PASSWORD CHANGE FLOW
### ============================================

### Step 1: Login
# @name loginForPasswordChange
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "student1@gmail.com",
  "password": "mynewpassword123"
}

### Extract token
@changePasswordToken = {{loginForPasswordChange.response.body.accessToken}}

### Step 2: Change password (without revoking tokens)
PATCH {{baseUrl}}/auth/change-password
Authorization: Bearer {{changePasswordToken}}
Content-Type: {{contentType}}

{
  "currentPassword": "mynewpassword123",
  "newPassword": "updatedpassword456",
  "revokeAllTokens": false
}

### Step 3: Login with new password
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "student1@gmail.com",
  "password": "updatedpassword456"
}

### Step 4: Change password WITH token revocation
# @name loginForRevoke
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "student1@gmail.com",
  "password": "updatedpassword456"
}

@revokeToken = {{loginForRevoke.response.body.accessToken}}

PATCH {{baseUrl}}/auth/change-password
Authorization: Bearer {{revokeToken}}
Content-Type: {{contentType}}

{
  "currentPassword": "updatedpassword456",
  "newPassword": "finalpassword789",
  "revokeAllTokens": true
}

### Test: Wrong current password (Should fail)
# @name loginForWrongPassword
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "student1@gmail.com",
  "password": "finalpassword789"
}

@wrongPassToken = {{loginForWrongPassword.response.body.accessToken}}

PATCH {{baseUrl}}/auth/change-password
Authorization: Bearer {{wrongPassToken}}
Content-Type: {{contentType}}

{
  "currentPassword": "wrongpassword",
  "newPassword": "newpassword123"
}

### Test: Same password as current (Should fail)
PATCH {{baseUrl}}/auth/change-password
Authorization: Bearer {{wrongPassToken}}
Content-Type: {{contentType}}

{
  "currentPassword": "finalpassword789",
  "newPassword": "finalpassword789"
}

### Test: Password too short (Should fail)
PATCH {{baseUrl}}/auth/change-password
Authorization: Bearer {{wrongPassToken}}
Content-Type: {{contentType}}

{
  "currentPassword": "finalpassword789",
  "newPassword": "123"
}

### Test: Unauthenticated request (Should fail)
PATCH {{baseUrl}}/auth/change-password
Content-Type: {{contentType}}

{
  "currentPassword": "finalpassword789",
  "newPassword": "newpassword123"
}

